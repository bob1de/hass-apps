schedy: ##That's the name (app_name) of your Schedy instance. You 
  # will need it, for instance, to trigger a reschedule of this
  # particular Schedy.
  
  # Obligatory settings that tell appdaemon where to find the app.
  # You shouldn't need to change these two.
  module: hass_apps_loader
  class: SchedyApp

  # Enable debugging output
  #debug: false


  # By default, Schedy tries to restore its previous state at startup
  # from the records stored in Home Assistant. This includes scheduled
  # values, manual adjustments and re-scheduling times - just everything.
  # When this behaviour is not desired, change this setting to true
  # and Schedy will just apply the schedules at startup, no matter what
  # the previous actor states were.
  #reset_at_startup: false


  # If you enable this option, potentially harmful expressions received
  # in schedy_set_value events are evaluated.
  #expressions_from_events: false

  # Here you can define Python modules that should be available
  # inside your expressions. These modules are imported upon Schedy's
  # initialization, hence you have to restart AppDaemon after making
  # changes to these modules.
  expression_modules:
    #math:
    #my_custom_module:
      # Optionally, define an alternative name under which the module
      # should be available.
      #as: alt_name


  # Chose the type of actors that should be controlled by this instance
  # of Schedy.
  # Possible types can be found in the documentation.
  #actor_type: <required>

  # In the following config block, you may define templates with
  # settings that affect multiple actors in your setup. These can then be
  # used as a starting point for the configuration of individual actors.
  # Nested inclusion of templates is possible as well.
  actor_templates:

    # Each template needs to have a name.
    #my_template:

      # Optionally have this template based on another one.
      #template: other_template

      # Actor type-specific settings can be found in the documentation.
      #foo: bar
      #...


  # Add schedule rules you want to have prepended to each room's schedule
  # automatically here.
  schedule_prepend:

  # Add schedule rules you want to have appended to each room's schedule
  # automatically here.
  schedule_append:

  # Optionally, configure schedule snippets that can be included by
  # expressions dynamically. See the documentation for an example on
  # how to use them.
  schedule_snippets:

    #summer:
    # ...


  # Configure your rooms here.
  rooms:

    # Create such a block for every room you want to control.
    #living:

      # An alternative friendly name to display in logs.
      #friendly_name: ...

      # When you disable this setting, Schedy won't allow actors to
      # change their value to something different from the scheduled
      # one or the one set by a schedy_set_value event. Actors
      # that change their value are then set back to the wanted one
      # immediately.
      #allow_manual_changes: true

      # This setting controls whether changes reported by one actor
      # should automatically be replicated to the other ones in this
      # particular room.
      #replicate_changes: true

      # Set this value to a number of minutes and Schedy will
      # automatically again apply the schedule after a manual change has
      # been made. If you, for instance, use the thermostat actor type,
      # change the target temperature at one of your thermostats and
      # this value is set to 120, Schedy will again apply the schedule
      # two hours after you made the change.
      # 0 means not re-schedule before the next scheduled value change
      # occurs.
      #rescheduling_delay: 0

      # All actors of this room go here.
      #actors:

        # This could be a sample thermostat.
        #climate.living1:

          # Choose the template this actor should inherit its settings
          # from.
          # By default, an actor inherits its settings from the "default"
          # template, given that you defined it.
          #template: default

          # We could, for instance, overwrite the delta defined in the
          # template, if any, for this particular thermostat only.
          #delta: 1.0


    # Configure statistical parameters to be collected.
    statistics:

      # Pick an arbitrary name for the parameter instance.
      #some_name:
        # The type of parameter as found in the actor'S documentation.
        #type: <required>
        # More parameter-specific settings ...

      # More parameter instances ...
