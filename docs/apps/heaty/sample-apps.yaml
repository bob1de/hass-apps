# This is a minimal example configuration that does just basic things.
# If you want to have further control over your heatings, use open window
# detection, set temperature based on entity states etc., please see the
# full example below.
heaty_minimal:
  # Obligatory settings that tell appdaemon where to find the app.
  # You shouldn't need to change these two.
  module: hass_apps_loader
  class: HeatyApp

  rooms:

    # Define such a block for each room you want to control.
    living:
      thermostats:
        climate.heating_living:
        climate.heating_living_2:
      schedule:
      # From Monday to Friday, set temperature to 20.5 째C from 7.45 am
      # to 10.00 pm.
      - { temp: 20.5, start: "07:45", end: "22:00", weekdays: 1-5 }
      # On weekends, set temperature to 20.5 째C from 8.15 am to 11.30 pm.
      - { temp: 20.5, start: "08:15", end: "23:30", weekdays: "6,7" }
      # At all other times, set temperature to 16 째C.
      - { temp: 16 }

    kitchen:
      thermostats:
        climate.heating_kitchen:
      schedule:
      # ...


# Full configuration example
heaty_full:
  # Obligatory settings that tell appdaemon where to find the app.
  # You shouldn't need to change these two.
  module: hass_apps_loader
  class: HeatyApp

  # An unique id that identifies this instance of Heaty.
  # This is just needed if you plan to run multiple Heaty instances
  # on a single Home Assistant instance.
  # If set, the id has to be passed with every heaty_* event you emit
  # for Heaty to be able to determine the instance the event is
  # intended for.
  # (optional, default: "default")
  #heaty_id: default

  # Enable debugging output
  # (optional, default: false)
  #debug: false

  # If you enable this option, potentially harmful temperature
  # expressions received in a heaty_set_temp event are evaluated.
  # For more information, please see README.rst.
  # (optional, default: false)
  #untrusted_temp_expressions: false

  # This switch can be used to turn off all rooms (e.g. for vacation times).
  # You may use any switch that has the states "on" and "off".
  # (optional, default: none)
  #master_switch: input_boolean.heating_master

  # Temperature that should be set when heatings are turned off.
  # 4 째C is recommended to protect against frost-induced damage.
  # A value of "OFF" will set the thermostat's operation mode
  # to off explicitly.
  # (optional, default: "OFF")
  #off_temp: "OFF"

  # Here you can define Python modules that should be available from
  # inside your temperature expressions. These modules are imported
  # upon Heaty's initialization, hence you have to restart AppDaemon
  # after making changes to these modules.
  # (optional)
  temp_expression_modules:
    #math:
    #my_custom_module:
      # Optionally, define an alternative name under which the module
      # should be available.
      # (optional)
      #as: alt_name

  # In the following config block, you may define settings that affect
  # all thermostats in your setup. These can be overwritten on a per
  # thermostat basis.
  thermostat_defaults:

    # An alternative friendly name to display in logs.
    # (optional)
    friendly_name: Thermo

    # Delta that is added to the temperature value sent to this
    # thermostat in order to correct potential inaccuracies of
    # the temperature sensor.
    # (optional, default: 0)
    #delta: 0

    # The minimum temperature the thermostat supports.
    # If a lower temperature than this is going to be set, the operation
    # mode will be switched off instead of setting the temperature.
    # (optional, default: null, which means there is no limitation)
    #min_temp: null

    # This setting tells Heaty how often it should retry sending
    # a temperature to the thermostat. If the thermostat reports
    # the set temperature back, no further retry is made.
    # You may find this useful if the connection between Home
    # Assistant and your thermostat is unreliable.
    # Set to 0 in order to disable retrying. -1 removes the limit
    # and causes the temperature to be re-sent until the thermostat
    # reports it back in its state (avoid this).
    # (optional, default: 10)
    #set_temp_retries: 10
    # How many seconds to wait between retryings.
    # (optional, default: 30)
    #set_temp_retry_interval: 30

    # Set this to false if your thermostat doesn't support operation modes.
    # Please note that you won't be able to turn it off completely without
    # operation mode support.
    # (optional, default: true)
    #supports_opmodes: true

    # These two settings can be used to tweak the names of the
    # operation modes.
    # (optional, default: Heat)
    #opmode_heat: Heat
    # (optional, default: "Off")
    #opmode_off: "Off"

    # You might want to use an alternative service that receives
    # the operation mode value.
    # (optional, default: climate/set_operation_mode)
    #opmode_service: climate/set_operation_mode
    # (optional, default: operation_mode)
    #opmode_service_attr: operation_mode
    # Entity attribute that holds the current operation mode.
    # This is used to detect manual temperature adjustments, provide
    # correct temperature values on startup and notice that a
    # thermostat picked up temperature changes.
    # (optional, default: operation_mode)
    #opmode_state_attr: operation_mode

    # You might want to use an alternative service that receives
    # the temperature value.
    # (optional, default: climate/set_temperature)
    temp_service: climate/set_temperature
    # (optional, default: temperature)
    #temp_service_attr: temperature
    # Entity attribute that holds the current target temperature.
    # This is used to detect manual temperature adjustments, provide
    # correct temperature values on startup and notice that a
    # thermostat picked up temperature changes.
    # (optional, default: temperature)
    #temp_state_attr: temperature

  # In the following config block, you may define settings that affect
  # all window sensors in your setup. These can be overwritten on a per
  # sensor basis.
  window_sensor_defaults:

    # An alternative friendly name to display in logs.
    # (optional)
    friendly_name: Window

    # Sensor state needs to stay constant for this number of seconds
    #  before the window open/closed detection kicks in.
    # (optional, default: 10)
    #delay: 10

    # By default, a state of "on" means open.
    # If your sensor reports differently, you need to adjust this setting.
    # If multiple states should be considered as open, specify a list
    # of states instead.
    # (optional, default: "on")
    #open_state: "on"
    #open_state: [1, "on"]

  # Add schedule rules you want to have prepended to each room's schedule
  # automatically here.
  schedule_prepend:

  # Add schedule rules you want to have appended to each room's schedule
  # automatically here.
  schedule_append:

  # Optionally, configure schedules that can be included by temperature
  # expressions dynamically. See the README.rst for an example on how
  # to use them.
  schedule_snippets:
    summer:
    # ...

  rooms:

    # Create such a block for every room you want to control.
    living:
      # An alternative friendly name to display in logs.
      # (optional)
      friendly_name: Living Room

      # This setting controls whether changes made locally at one thermostat
      # should automatically be replicated at the other ones in this
      # particular room.
      # (optional, default: true)
      #replicate_changes: true

      # Set this value to a number of minutes and Heaty will automatically
      # re-schedule the temperature after a manual change has been made.
      # If you, for instance, change the target temperature at one of your
      # thermostats and this value is set to 120, Heaty will again apply
      # the schedule 2 hours after you made the change.
      # (optional, default: 0, which means never re-schedule)
      #reschedule_delay: 0

      # All thermostats of this room go here.
      thermostats:

        climate.living1
          # We could, for instance, overwrite the delta defined in the
          # defaults, if any, for this particular thermostat only.
          delta: 1.0

        climate.living_2:
          # ...

      # Window open/closed detection
      window_sensors:

        # Create a sensor item for each window sensor you want to consider
        # and overwrite default parameters if needed.
        # A window sensor may be any sensor that changes states when
        # window is opened/closed..
        binary_sensor.window_living:
          open_state: open

      # Schedule for this room.
      # The explanation of schedules has been removed from this file,
      # because it is simply to detailled.
      #
      # Please see README.rst.
      #
      schedule:
        # ...
